name: Clean Up Recent Workflow Runs

on:
  schedule:
    - cron: '0 2 * * *'
  workflow_dispatch:

jobs:
  cleanup-recent-runs:
    runs-on: ubuntu-latest
    steps:
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: pip install requests

      - name: Run cleanup script for RECENT runs
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          # Delete runs CREATED WITHIN this many days
          DELETE_WITHIN_DAYS: 30
          # Always keep at least this many of the most recent runs as a safeguard
          KEEP_MINIMUM_RUNS: 1
        run: |
          python -c '
          import os
          import requests
          from datetime import datetime, timedelta, UTC

          # --- Configuration ---
          token = os.getenv("GITHUB_TOKEN")
          repo = os.getenv("GITHUB_REPOSITORY")
          delete_within_days = int(os.getenv("DELETE_WITHIN_DAYS", "30"))
          keep_minimum = int(os.getenv("KEEP_MINIMUM_RUNS", "1"))

          if not token or not repo:
              print("Error: GITHUB_TOKEN or GITHUB_REPOSITORY not set.")
              exit(1)

          # --- Script Logic ---
          headers = {
              "Authorization": f"token {token}",
              "Accept": "application/vnd.github.v3+json"
          }
          
          cutoff_date = datetime.now(UTC) - timedelta(days=delete_within_days)
          
          print(f"Deletion Policy: Targeting runs created WITHIN the last {delete_within_days} days (after {cutoff_date.isoformat()}).")
          print(f"Safety Policy: Always keeping the {keep_minimum} most recent run(s).")

          runs_url = f"https://api.github.com/repos/{repo}/actions/runs"
          params = {"per_page": 100}
          
          response = requests.get(runs_url, headers=headers, params=params)
          if response.status_code != 200:
              print(f"Error fetching workflow runs: {response.status_code} - {response.text}")
              exit(1)

          all_runs = response.json().get("workflow_runs", [])
          recent_runs_to_consider = []

          for run in all_runs:
              if run["status"] == "in_progress":
                  continue
              
              created_at = datetime.fromisoformat(run["created_at"])
              if created_at >= cutoff_date:
                  recent_runs_to_consider.append(run)

          if not recent_runs_to_consider:
              print("No recent runs found within the time window to delete.")
              exit(0)

          recent_runs_to_consider.sort(key=lambda r: datetime.fromisoformat(r["created_at"]), reverse=True)

          if len(recent_runs_to_consider) <= keep_minimum:
              print(f"Found {len(recent_runs_to_consider)} recent run(s), which is not more than the minimum of {keep_minimum} to keep. Nothing to delete.")
              exit(0)
          
          runs_to_delete = recent_runs_to_consider[keep_minimum:]

          print(f"Found {len(runs_to_delete)} recent run(s) to delete.")

          for run in runs_to_delete:
              delete_url = f"https://api.github.com/repos/{repo}/actions/runs/{run['id']}"
              
              del_response = requests.delete(delete_url, headers=headers)
              
              if del_response.status_code == 204:
                  print(f"Successfully deleted run ID: {run['id']} (Created: {run['created_at']})")
              else:
                  print(f"Failed to delete run ID {run['id']}: {del_response.status_code} - {del_response.text}")

          print("Cleanup complete.")
          '
