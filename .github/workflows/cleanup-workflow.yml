name: Clean Up Old Workflow Runs

on:
  # Run this workflow automatically every day at 02:00 UTC
  schedule:
    - cron: '0 2 * * *'
  
  # Allow running this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  cleanup-runs:
    runs-on: ubuntu-latest
    steps:
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: pip install requests

      - name: Run cleanup script
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          RETENTION_DAYS: 30
        run: |
          python -c '
          import os
          import requests
          from datetime import datetime, timedelta

          # --- Configuration from Environment Variables ---
          token = os.getenv("GITHUB_TOKEN")
          repo = os.getenv("GITHUB_REPOSITORY")
          retain_days = int(os.getenv("RETENTION_DAYS", "30"))

          if not token or not repo:
              print("Error: GITHUB_TOKEN or GITHUB_REPOSITORY not set.")
              exit(1)

          # --- Script Logic ---
          headers = {
              "Authorization": f"token {token}",
              "Accept": "application/vnd.github.v3+json"
          }
          
          cutoff_date = datetime.utcnow() - timedelta(days=retain_days)
          print(f"Retention policy: Deleting runs older than {retain_days} days (created before {cutoff_date.isoformat()}).")

          runs_url = f"https://api.github.com/repos/{repo}/actions/runs"
          params = {"per_page": 100}
          
          response = requests.get(runs_url, headers=headers, params=params)
          if response.status_code != 200:
              print(f"Error fetching workflow runs: {response.status_code} - {response.text}")
              exit(1)

          all_runs = response.json()["workflow_runs"]
          runs_to_delete = []

          for run in all_runs:
              created_at = datetime.strptime(run["created_at"], "%Y-%m-%dT%H:%M:%SZ")
              if run["status"] != "in_progress" and created_at < cutoff_date:
                  runs_to_delete.append(run)

          if not runs_to_delete:
              print("No old workflow runs to delete.")
              exit(0)

          print(f"Found {len(runs_to_delete)} workflow run(s) to delete.")

          for run in runs_to_delete:
              delete_url = f"https://api.github.com/repos/{repo}/actions/runs/{run['id']}"
              
              del_response = requests.delete(delete_url, headers=headers)
              
              if del_response.status_code == 204:
                  print(f"Successfully deleted run ID: {run['id']} (Created: {run['created_at']})")
              else:
                  print(f"Failed to delete run ID {run['id']}: {del_response.status_code} - {del_response.text}")

          print("Cleanup complete.")
          '
